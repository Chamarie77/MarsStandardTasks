{
	"info": {
		"_postman_id": "528fb1ce-bd4a-4492-8714-29122187087a",
		"name": "JsonTest Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20694401"
	},
	"item": [
		{
			"name": "List IP JsonTest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Assertion 1\r",
							"pm.test(\"Status code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Assertion 2 - Headers check\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"//Check body string\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"ip\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://ip.jsontest.com/",
					"protocol": "http",
					"host": [
						"ip",
						"jsontest",
						"com"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "List Echo JsonTest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Assertion 1\r",
							"pm.test(\"Status code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Assertion 2 - Headers check\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"//Check body string\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"insert-key-here\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://echo.jsontest.com/insert-key-here/insert-value-here/key/value",
					"protocol": "http",
					"host": [
						"echo",
						"jsontest",
						"com"
					],
					"path": [
						"insert-key-here",
						"insert-value-here",
						"key",
						"value"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Date JsonTest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Assertion 1\r",
							"pm.test(\"Status code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Assertion 2 - Headers check\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"//Check body string\r",
							"pm.test(\"Body contains string\", () => {\r",
							"    pm.expect(pm.response.text()).to.include(\"date\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://date.jsontest.com/",
					"protocol": "http",
					"host": [
						"date",
						"jsontest",
						"com"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Validate JsonTest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Assertion 1\r",
							"pm.test(\"Status code check\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Assertion 2 - Headers check\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"//Check body values\r",
							"pm.test(\"Body contains values\", () => {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.size).to.eql(1);\r",
							"    pm.expect(responseJson.validate).to.eql(true);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://validate.jsontest.com/?json=%5BJSON-code-to-validate%5D",
					"protocol": "http",
					"host": [
						"validate",
						"jsontest",
						"com"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "json",
							"value": "%5BJSON-code-to-validate%5D"
						}
					]
				}
			},
			"response": []
		}
	]
}